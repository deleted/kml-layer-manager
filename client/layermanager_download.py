#!/usr/bin/env python
#
# Copyright 2010 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Concurrently fetches KMLs/KMZs generated by the KML Layer Manager."""

import os
import time
import sys
import urllib2
import threading


LIST_URL = 'http://%s/kml-list/%d?with_resources'
DEFAULT_MAX_THREADS = 100
THREAD_WAIT = 2


def RunDownload(host, layer_id, destination, max_threads):
  print 'Getting list.'
  to_download = urllib2.urlopen(LIST_URL % (host, layer_id)).read().split('\n')
  threads = []

  for url in to_download:
    threads = [t for t in threads if t.isAlive()]
    while len(threads) >= max_threads:
      print 'Waiting for %d threads...' % len(threads)
      time.sleep(THREAD_WAIT)
      threads = [t for t in threads if t.isAlive()]

    new_thread = threading.Thread(target=Download, args=(url, destination))
    new_thread.start()
    threads.append(new_thread)

  for thread in threads:
    thread.join()
  print 'Done.'


def Download(url, destination, try_num=1):
  """Downloads a file, with retries."""
  print 'Getting %s (try #%d)' % (url, try_num)
  try:
    filepath = os.path.join(destination, os.path.basename(url))
    content = urllib2.urlopen(url).read()
    outfile = open(filepath, 'w')
    outfile.write(content)
    outfile.close()
    os.chmod(filepath, 0644)
  except urllib2.HTTPError, e:
    if e.code == 500:
      Download(url, destination, try_num + 1)
    else:
      raise


if __name__ == '__main__':
  if len(sys.argv) in (4, 5):
    host, layer_id, destination = sys.argv[1:4]
    if len(sys.argv) == 5:
      max_threads = int(sys.argv[4])
    else:
      max_threads = 100
    RunDownload(host, int(layer_id), destination, max_threads)
  else:
    args = (os.path.basename(__file__), DEFAULT_MAX_THREADS)
    print 'Usage: %s host layer_id destination [max_threads=%d]' % args
